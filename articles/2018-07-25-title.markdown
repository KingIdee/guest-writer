---
layout: post
title: "Configuring Continuous Deployment Pipelines on Node.js Web Apps"
description: "This article will put your through the process of deploying a simple Node.js application on Now.sh. You will use GitHub as your git hosting repository, and Travis CI as your continuous deployment server."
date: "2018-07-25 08:30"
author:
  name: "Idorenyin Obong"
  url: "kingidee"
  mail: "idee4ril@gmail.com"
  avatar: "https://twitter.com/kingidee/profile_image?size=original"
related:
- 2017-11-15-an-example-of-all-possible-elements
---

## TL;DR: 
In this article, you will learn how to configure a continuous deployment pipeline for a Node.js web application. For demonstration purposes, you will use Now.sh, GitHub, and TravisCI to automate the pipeline. However, the strategy that you will learn here can be used with other solutions as well (like BitBucket, AWS, and CircleCI, for example).


## Continuous Deployment Overview

Continuous deployment popularly know as CD is a modern software engineering approach that has to do with automating the release of softwares. Instead of the usual manual method of pushing out a software to production, continuous deployment aims to ease and automate this process with the use of pipelines. In continuous deployment, an update to the source code means an update to the production server too provided all tests are passed. Continuous deployment is often mistaken with continuous integration and continuous delivery. For you to properly get a hang of this concept, let us distinguish the other two concepts.

Continuous Integration(CI) - In continuous integration, when a new code is checked in, a build is generated and tested. The aim is to test every new code to be sure that it doesnâ€™t break the software as a whole. This will require writing test for every update that is pushed. The importance of CI is to ensure a stable codebase at all times especially when there are multiple developers in a team. With this, bugs are discovered easily when the automated tests fail.

Continuous Delivery - Continuous delivery moves a step ahead of CI. After testing, the release process is also automated. The aim is to generate a releasable build i.e a build that is stable enough to go into production. This helps to reduce the hassle of preparing for release. In continuous delivery, since there are regular releases, there is a faster feedback.

The major difference between continuous delivery and continuous deployment is the way releases are done.  One is manual, while the other is automated. With continuous delivery your software is always at a state where it can be pushed out to production manually.  Whereas, with continuous deployment, any stable working version of the software is pushed to production immediately. Continuous deployment needs continuous delivery, but the reverse is not applicable.

In all of these, you need a repository where your code will reside and a CI server to monitor the repository where the code is checked into. When the server notices an update in the code, it triggers the pipeline. A pipeline in this context is a script/file that contains commands and tasks to be executed on the project. When typically setting up your CI server, you setup your pipeline alongside it. Some common CI servers include Travis CI, Jenkins, TeamCity, etc.

In this post, you will learn how to setup a CI server together with a GitHub repository to show continuous deployments. Continuous deployments are important for the following reasons: better integration for large teams, faster and easier releases, faster feedback, increased development productivity as a whole, etc.
